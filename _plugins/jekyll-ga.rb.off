# Adapted from https://code.google.com/p/google-api-ruby-client/

require 'google/api_client'
require 'chronic'

module Jekyll

  class GoogleAnalytics < Generator
    safe true
    priority :highest

    def generate(site)

      # In case google is not responsive, log error and continue rendering.
      begin
        config = site.config

        if !config['jekyll_ga']
          return
        end

        ga = config['jekyll_ga']

        options = {}
        if ga['host']
          options['host'] = ga['host']
        end
        if ga['port']
          options['port'] = ga['port']
        end
        client = Google::APIClient.new(options)

        # Load our credentials for the service account
        key = Google::APIClient::KeyUtils.load_from_pkcs12(ga['key_file'], ga['key_secret'])
        if options['host'] && options['port']
          authUrl = 'http://' + options['host'] + ':' + options['port'] + '/o/oauth2/token'
        else
          authUrl = 'https://accounts.google.com/o/oauth2/token'
        end
        client.authorization = Signet::OAuth2::Client.new(
          :token_credential_uri => authUrl,
          :audience => 'https://accounts.google.com/o/oauth2/token',
          :scope => 'https://www.googleapis.com/auth/analytics.readonly',
          :issuer => ga['service_account_email'],
          :signing_key => key)

        # Request a token for our service account
        client.authorization.fetch_access_token!
        analytics = client.discovered_api('analytics','v3')

        params = {
          'ids' => ga['profileID'],
          'start-date' => Chronic.parse(ga['start']).strftime("%Y-%m-%d"),
          'end-date' => Chronic.parse(ga['end']).strftime("%Y-%m-%d"),
          'dimensions' => "ga:pagePath",
          'metrics' => ga['metric'],
          'max-results' => 10000
        }
        if ga['segment']
          params['segment'] = ga['segment']
        end
        if ga['filters']
          params['filters'] = ga['filters']
        end

        response = client.execute(:api_method => analytics.data.ga.get, :parameters => params)
        results = Hash[response.data.rows]
        posts = site.posts

        # Add _ga attribute
        posts.each { |post|
          url = (config['baseurl'] || '') + post.url + '/'
          post.data.merge!("_ga" => (results[url]) ? results[url].to_i : 0)
        }

        site.posts = posts

      # Log error
      rescue Exception=>e
        puts 'Google Analytics Error: ' + e.to_s
      end
    end
  end


  class Post

    # Override comparator to first try _ga value
    def <=>(other)
      cmp = (self.data['_ga'] || 0) <=> (other.data['_ga'] || 0)
      if 0 == cmp
        cmp = self.date <=> other.date
      elsif 0 == cmp
        cmp = self.slug <=> other.slug
      end
      return cmp
    end
  end
end
